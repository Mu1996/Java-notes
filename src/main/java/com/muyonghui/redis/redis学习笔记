本地mac系统 使用的brew install redis 安装

启动：
brew services start redis （后台启动）
redis-server /usr/local/etc/redis.conf

redis的优势
存储结构
1.	字符类型（string）
2.	散列类型（hash）
3.	列表类型（list）
4.	集合类型（set）
5.	有序集合（sorted set）

功能
1.  可以为每个key设置超时时间
2.  可以通过列表类型来实现分布式队列的操作
3.  支持发布订阅的消失模式

操作简单
1.  提供了很多命令与redis进行交互

redis的应用场景
1.  数据缓存（商品数据、新闻、热点数据）
2.  单点登录
3.  秒杀、抢购
4.  网站访问排名
5.  应用的模块开发

redis的安装(Linux)
1.	下载redis安装包
2.	tar -zxvf 安装包
3.	在redis目录下 执行 make
4.	可以通过make test测试编译状态
5.	make install [prefix=/path]完成安装

启动停止redis
./redis-server ../redis.conf
./redis-cli shutdown
以后台进程的方式启动，修改redis.conf   daemonize=yes

连接到redis的命令
./redis-cli -h 127.0.0.1 -p 6379

其他命令说明
redis-server 启动服务
redis-cli 访问到redis的控制台
redis-benchmark 性能测试的工具
redis-check-aof aof文件进行检测的工具
redis-check-dump  rdb文件检查工具
redis-sentinel  sentinel 服务器配置

多数据支持
默认支持16个数据库；可以理解为一个命名空间
跟关系型数据库不一样的点
1.	redis不支持自定义数据库名词
2.	每个数据库不能单独设置授权
3.	每个数据库之间并不是完全隔离的。可以通过flushall命令清空redis实例面的所有数据库中的数据
通过select dbid 去选择不同的数据库命名空间。dbid的取值范围默认是0 -15


使用入门
1.	获得一个符合匹配规则的键名列表
keys pattern [?/*/[]]
keys mu:name
2.	判断一个键是否存在，EXISTS key
3.	type key 去获得这个key的数据结构类型

各种数据结构的使用

key的设计
对象类型:对象id:对象属性:对象子属性
建议对key进行分类，同步在wiki统一管理
短信重发机制：sms:limit:mobile 138。。。。。 expire

字符类型
一个字符类型的key默认存储的最大容量是512M
赋值和取值
SET key value
GET key

同时获得／赋值多个key的value
mget key key..
mset key value  key value  key value …

追加字符串
append key append-string

获得key对应的value的长度
strlen  key

递增数字
incr key 原子递增
incrby key increment递增指定整数
decr key 原子递减

错误的演示
int value= get key;
value =value +1;
set key value;


列表类型list
可以存储一个有序的字符串列表
LPUSH/RPUSH： 从左边或者右边push数据
LPUSH/RPUSH key value value …
｛17 20 19 18 16｝

llen num  获得列表的长度
lrange key  start stop
索引可以是负数， -1表示最右边的第一个元素
lrem key count value
lset key index value
LPOP/RPOP : 取数据
应用场景：可以用来做分布式消息队列

散列类型
hash key value  不支持数据类型的嵌套
比较适合存储对象
person
age  18
sex  男
name muyh
..

hset key field value
hget key filed

hmset key filed value [filed value …]  一次性设置多个值
hmget key field field …  一次性获得多个值
hgetall key  获得hash的所有信息，包括key和value
hexists key field 判断字段是否存在。 存在返回1. 不存在返回0
hincryby
hsetnx
hdel key field [field …] 删除一个或者多个字段

集合类型
set 跟list 不一样的点。 集合类型不能存在重复的数据。而且是无序的
sadd key member [member ...] 增加数据； 如果value已经存在，则会忽略存在的值，并且返回成功加入的元素的数量
srem key member  删除元素
smembers key 获得所有数据

sdiff key key …  对多个集合执行差集运算
sunion 对多个集合执行并集操作, 同时存在在两个集合里的所有值

有序集合
zadd key score member

zrange key start stop [withscores] 去获得元素。 withscores是可以获得元素的分数
如果两个元素的score是相同的话，那么根据(0<9<A<Z<a<z) 方式从小到大
网站访问的前10名。


redis的事务处理
MULTI 去开启事务
EXEC 去执行事务

过期时间
expire key seconds
ttl  获得key的过期时间

发布订阅
publish channel message
subscribe channel [ …]

redis实现分布式锁
缓存 -redis  setnx

锁是用来解决什么问题的;
1.	一个进程中的多个线程，多个线程并发访问同一个资源的时候，如何解决线程安全问题。
2.	一个分布式架构系统中的两个模块同时去访问一个文件对文件进行读写操作
3.	多个应用对同一条数据做修改的时候，如何保证数据的安全性
在但进程中，我们可以用到synchronized、lock之类的同步操作去解决，但是对于分布式架构下多进程的情况下，如何做到跨进程的锁。就需要借助一些第三方手段来完成

设计一个分布式所需要解决的问题
分布式锁的解决方案
1.	怎么去获取锁
2.	怎么去释放锁

存在的需要思考的问题
1.	锁没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁
2.	锁是非阻塞的，数据的insert操作，一旦插入失败就会直接报错。没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作
3.	锁是非重入的，同一个线程在没有释放锁之前无法再次获得该锁

zookeeper实现分布式锁
利用zookeeper的唯一节点特性或者有序临时节点特性获得最小节点作为锁. zookeeper 的实现相对简单，通过curator客户端，已经对锁的操作进行了封装。
原理简单来说就是创建有序节点。
zookeeper的优势
1.	可靠性高、实现简单
2.	zookeeper因为临时节点的特性，如果因为其他客户端因为异常和zookeeper连接中断了，那么节点会被删除，意味着锁会被自动释放
3.	zookeeper本身提供了一套很好的集群方案，比较稳定
4.	释放锁操作，会有watch通知机制，也就是服务器端会主动发送消息给客户端这个锁已经被释放了

基于缓存的分布式锁实现
redis中有一个setNx命令，这个命令只有在key不存在的情况下为key设置值。所以可以利用这个特性来实现分布式锁的操作


redis多路复用机制
linux的内核会把所有外部设备都看作一个文件来操作，对一个文件的读写操作会调用内核提供的系统命令，返回一个 file descriptor（文件描述符）。
对于一个socket的读写也会有响应的描述符，称为socketfd(socket 描述符)。
而IO多路复用是指内核一旦发现进程指定的一个或者多个文件描述符IO条件准备好以后就通知该进程
IO多路复用又称为事件驱动，操作系统提供了一个功能，当某个socket可读或者可写的时候，它会给一个通知。
当配合非阻塞socket使用时，只有当系统通知我哪个描述符可读了，我才去执行read操作，可以保证每次read都能读到有效数据。
操作系统的功能通过select/pool/epoll/kqueue之类的系统调用函数来使用，这些函数可以同时监视多个描述符的读写就绪情况，
这样多个描述符的I/O操作都能在一个线程内并发交替完成，这就叫I/O多路复用，这里的复用指的是同一个线程
多路复用的优势在于用户可以在一个线程内同时处理多个socket的io请求。
达到同一个线程同时处理多个IO请求的目的。而在同步阻塞模型中，必须通过多线程的方式才能达到目的


redis中使用lua脚本
lua脚本
Lua是一个高效的轻量级脚本语言，用标准C语言编写并以源代码形式开放， 其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能
使用脚本的好处
1.	减少网络开销，在Lua脚本中可以把多个命令放在同一个脚本中运行
2.	原子操作，redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。换句话说，编写脚本的过程中无需担心会出现竞态条件
3.	复用性，客户端发送的脚本会永远存储在redis中，这意味着其他客户端可以复用这一脚本来完成同样的逻辑
